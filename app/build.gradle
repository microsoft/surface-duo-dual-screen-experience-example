/*
 *
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License.
 *
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'com.google.android.gms.oss-licenses-plugin'
}

apply from: 'secrets.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner config.testInstrumentationRunner

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.incremental": "true"]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        emulator {
            applicationIdSuffix ".appEmulator"
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "BING_MAPS_KEY", "\"$bingMapsKey\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.composeUiVersion
    }

    configurations.all {
        resolutionStrategy {
            exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
        }
    }

    testOptions {
        animationsDisabled = true
    }

    // This is the default but added it explicitly so we can change it more easily
    testBuildType "debug"
}

dependencies {
    implementation kotlinDependencies.kotlinStdlib

    implementation androidxDependencies.appCompat
    implementation androidxDependencies.constraintLayout
    implementation androidxDependencies.ktxCore
    implementation androidxDependencies.ktxFragment
    implementation androidxDependencies.webkit
    implementation androidxDependencies.lifecycleRuntimeKtx
    implementation androidxDependencies.windowManager

    implementation androidxDependencies.room
    implementation androidxDependencies.roomKtx
    kapt androidxDependencies.roomCompiler

    implementation navigationDependencies.fragmentKtx
    implementation navigationDependencies.uiKtx

    implementation composeDependencies.composeUi
    debugImplementation  composeDependencies.composeTooling
    implementation composeDependencies.composeFoundation
    implementation composeDependencies.composeMaterial
    implementation composeDependencies.composeMaterialIcons
    implementation composeDependencies.composeMaterialIconsExtended
    implementation composeDependencies.composeViewModel
    implementation composeDependencies.composeLiveData
    implementation composeDependencies.constraintlayoutCompose
    implementation composeDependencies.coil

    implementation googleDependencies.ossLicenses
    implementation googleDependencies.material
    implementation googleDependencies.gson
    implementation googleDependencies.hilt
    kapt googleDependencies.hiltCompiler

    debugImplementation googleDependencies.maps
    debugImplementation googleDependencies.mapsKtx
    releaseImplementation googleDependencies.maps
    releaseImplementation googleDependencies.mapsKtx
    emulatorImplementation microsoftDependencies.bingMaps

    implementation microsoftDependencies.ink
    implementation microsoftDependencies.bottomNavBar
    implementation microsoftDependencies.recyclerView
    implementation microsoftDependencies.layouts
    implementation microsoftDependencies.wmUtils
    implementation microsoftDependencies.snackbar
    implementation microsoftDependencies.windowState

    implementation uiDependencies.lottie

    implementation uiDependencies.glide
    kapt uiDependencies.glideAnnotationProcesor

    testImplementation testDependencies.junit
    testImplementation testDependencies.archTesting
    androidTestImplementation instrumentationTestDependencies.junit
    androidTestImplementation instrumentationTestDependencies.espressoCore
    androidTestImplementation instrumentationTestDependencies.espressoContrib
    androidTestImplementation instrumentationTestDependencies.espressoAccessibility
    androidTestImplementation instrumentationTestDependencies.uiAutomator
    androidTestImplementation instrumentationTestDependencies.testRules
    androidTestImplementation instrumentationTestDependencies.testRunner
    androidTestImplementation instrumentationTestDependencies.roomTesting
    androidTestImplementation instrumentationTestDependencies.coroutinesTest
    androidTestImplementation instrumentationTestDependencies.hiltTesting
    androidTestImplementation instrumentationTestDependencies.archTesting
    androidTestImplementation instrumentationTestDependencies.kotlinTesting

    kaptAndroidTest instrumentationTestDependencies.hiltTestingCompiler
}

// Gradle lockfile needed for Component Governance check
allprojects {
    configurations {
        debugImplementationDependenciesMetadata {
            resolutionStrategy.activateDependencyLocking()
        }
        releaseImplementationDependenciesMetadata {
            resolutionStrategy.activateDependencyLocking()
        }
        emulatorImplementationDependenciesMetadata {
            resolutionStrategy.activateDependencyLocking()
        }
    }

    // Run with the "gradlew resolveAndLockAll --write-locks" command
    task resolveAndLockAll {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks
        }
        doLast {
            configurations {
                debugImplementationDependenciesMetadata {
                    it.resolve()
                }
                releaseImplementationDependenciesMetadata {
                    it.resolve()
                }
                emulatorImplementationDependenciesMetadata {
                    it.resolve()
                }
            }
        }
    }
}
